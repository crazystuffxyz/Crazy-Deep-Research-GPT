import express from"express";import http from"http";import axios from"axios";import{WebSocketServer}from"ws";import{Ollama}from"ollama";import{askAI}from"./askAI.js";import{getTranscript as getYouTubeTranscript}from"./getYoutubeSubsWithLinks.js";const app=express(),port=process.env.PORT||3e3,ollama=new Ollama;app.use(express.json()),app.use(express.static("public"));const server=http.createServer(app),wss=new WebSocketServer({server:server}),MODE_NORMAL=0,MODE_DEEP_THINK=1,MODE_SEARCH=2,MODE_SEARCH_DT=3,MODE_DEEP_RESEARCH_LITE=4,MODE_YOUTUBE_TRANSCRIPT=5,MODE_AUTO=6,MODE_HEAVY_DUTY_DEEP_RESEARCH=7;wss.on("connection",(async(e,s)=>{const r=s.headers["x-forwarded-for"];let t;if(r&&(t="string"==typeof r?r.split(",")[0].trim():Array.isArray(r)?r[0].trim():null),!t&&s.headers["x-real-ip"]&&(t=s.headers["x-real-ip"]),t||(t=s.socket.remoteAddress),t&&t.includes("::ffff:")?t=t.split("::ffff:")[1]:"::1"===t&&(t="127.0.0.1"),"127.0.0.1"==t)try{var o=await axios.get("https://api.ipify.org");t=o.data}catch(e){console.warn("Could not fetch public IP for localhost.")}console.log(`Client from ${t||"unknown IP"} connected via WebSocket.`),e.on("message",(async s=>{let r;try{r=JSON.parse(s)}catch(s){return void e.send(JSON.stringify({error:"Invalid JSON format",isFinal:!0}))}let{option:o,prompts:n,currentQuery:a,model:i,temperature:l,researchDepth:c,researchBreadth:p,customSystemPrompt:u,youtubeUrl:d,resumePayload:m,clientMessageId:f,clientSessionId:h}=r;!a&&n&&n.length>0&&"user"===n[n.length-1].role&&(a=n[n.length-1].content);const g=[0,1,2,3,4,5,6,7];if(!Number.isInteger(o)||!g.includes(o))return void e.send(JSON.stringify({error:"Invalid option.",isFinal:!0}));n&&Array.isArray(n)||(n=[]);const y=s=>{if(e.readyState===e.OPEN){let r={...s};"boolean"!=typeof r.isFinal&&(r.isFinal=!1),4!==o&&7!==o||"Complete"!==r.status||!r.finalResult||(r.isFinal=!0),"Mode Determined"===r.status&&6===o&&(r.isFinal=!1),e.send(JSON.stringify(r))}};try{let e=[...n],s=[...n];if(a&&s.push({role:"user",content:a}),6===o)return y({thinking:"Auto Mode: Determining best approach...",response:"",isFinal:!1}),void await askAI(6,s,y,i,l,c,p,u,null,s,t,null,f,h);if(5===o){if(!d)return void y({thinking:"YouTube Transcript Mode: No YouTube URL provided.",response:"Please include a YouTube URL.",isFinal:!0});y({thinking:`YouTube Transcript Mode: Fetching transcript for ${d}...`,response:"",isFinal:!1});const r=await getYouTubeTranscript(d);if(r.error)return void y({thinking:`YouTube Transcript Mode: Error fetching transcript. ${r.error}`,response:`Failed to get transcript: ${r.error}`,isFinal:!0});y({thinking:"YouTube Transcript Mode: Transcript fetched. Preparing to answer...",response:"",isFinal:!1,status:"Transcript Fetched"});const o=a.replace(d,"").trim()||"Summarize this video.",n=`Based on the following YouTube video transcript, please answer my question.\n\nTranscript:\n${r.transcript}\n\nMy question is: ${o}`,m=[...e,{role:"user",content:n}];return void await askAI(0,m,y,i,l,c,p,u,null,s,t,null,f,h)}await askAI(o,s,y,i,l,c,p,u,null,s,t,m,f,h)}catch(e){console.error("Error processing WebSocket request:",e),y({error:"Failed to process AI request.",details:e.message,isFinal:!0})}})),e.on("close",(()=>{console.log("Client disconnected from WebSocket.")}))})),app.post("/ask",(async(e,s)=>{const{option:r,prompts:t,currentQuery:o,model:n,temperature:a,researchDepth:i,researchBreadth:l,customSystemPrompt:c,youtubeUrl:p}=e.body;let u="",d="",m=!1;const f=e=>{e.thinking&&(u=e.thinking),e.response&&(d=e.response),e.finalResult&&(d=`## Research Paper\n\n${e.finalResult.researchPaper}\n\n## Works Cited\n\n${e.finalResult.citations}`,m=!0),(e.isFinal||"Complete"===e.status)&&(m=!0)};let h=t?[...t]:[];o&&h.push({role:"user",content:o});try{if(5===r&&p){const s=await getYouTubeTranscript(p);if(s.error)throw new Error(s.error);const r=o.replace(p,"").trim()||"Summarize this video.",i=`Transcript:\n${s.transcript}\n\nMy question: ${r}`,l=[...t||[],{role:"user",content:i}];await askAI(0,l,f,n,a,null,null,c,null,h,e.ip)}else await askAI(r,h,f,n,a,i,l,c,null,h,e.ip);s.json({thinking:u,response:d,isComplete:m})}catch(e){s.status(500).json({error:"Failed to process AI request.",details:e.message})}})),app.get("/api/ollama/models",(async(e,s)=>{try{const e=await ollama.list();s.json(e.models||[])}catch(e){s.status(500).json({error:"Failed to fetch Ollama models",details:e.message})}})),app.post("/api/ollama/pull",(async(e,s)=>{const{name:r}=e.body;if(!r)return s.status(400).json({success:!1,error:"Model name is required."});try{let e="Pulling...";console.log(r);for await(const s of await ollama.pull({model:r,stream:!0}))e=s.status;e&&e.includes("success")?s.json({success:!0,message:`Model ${r} pulled successfully. Final status: ${e}`}):s.json({success:!1,message:`Model ${r} pull finished. Status: ${e||"Unknown, check logs."}`})}catch(e){s.status(500).json({success:!1,error:"Failed to pull Ollama model",details:e.message})}})),server.listen(port,(()=>{console.log(`Server is listening on port ${port}`)}));