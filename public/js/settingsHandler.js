import{populateModelSelectors}from"./uiManager.js";export let appSettings={primaryModel:"",primaryModelTemp:.7,auxModel:"",auxModelTemp:.5,researchDepth:2,researchBreadth:3,customSystemPrompt:"",websocketConcurrency:5};let primaryModelSelectorEl,primaryModelTempEl,auxModelSelectorEl,auxModelTempEl,researchDepthEl,researchBreadthEl,customSystemPromptEl,websocketConcurrencyEl,settingsModal,closeSettingsModalBtn,saveSettingsBtn,pullModelNameInputEl,pullModelBtnEl,pullStatusEl;export function initSettingsDOM(e){primaryModelSelectorEl=e.primaryModelSelectorEl,primaryModelTempEl=e.primaryModelTempEl,auxModelSelectorEl=e.auxModelSelectorEl,auxModelTempEl=e.auxModelTempEl,researchDepthEl=e.researchDepthEl,researchBreadthEl=e.researchBreadthEl,customSystemPromptEl=e.customSystemPromptEl,websocketConcurrencyEl=e.websocketConcurrencyEl,settingsModal=e.settingsModal,closeSettingsModalBtn=e.closeSettingsModalBtn,saveSettingsBtn=e.saveSettingsBtn,pullModelNameInputEl=e.pullModelNameInputEl,pullModelBtnEl=e.pullModelBtnEl,pullStatusEl=e.pullStatusEl,closeSettingsModalBtn&&closeSettingsModalBtn.addEventListener("click",(()=>closeModal(settingsModal))),saveSettingsBtn&&saveSettingsBtn.addEventListener("click",saveAppSettings),pullModelBtnEl&&pullModelBtnEl.addEventListener("click",pullNewModel),window.addEventListener("keydown",(e=>{"Escape"===e.key&&settingsModal&&!settingsModal.classList.contains("hidden")&&closeModal(settingsModal)})),settingsModal&&settingsModal.addEventListener("click",(e=>{e.target===settingsModal&&closeModal(settingsModal)}))}export function loadAppSettings(){const e=localStorage.getItem("appSettings");if(e)try{const t=JSON.parse(e);appSettings={...appSettings,...t}}catch(e){console.error("Error parsing saved settings, using defaults.",e),localStorage.removeItem("appSettings")}primaryModelSelectorEl&&(primaryModelSelectorEl.value=appSettings.primaryModel||""),primaryModelTempEl&&(primaryModelTempEl.value=appSettings.primaryModelTemp||.7),auxModelSelectorEl&&(auxModelSelectorEl.value=appSettings.auxModel||""),auxModelTempEl&&(auxModelTempEl.value=appSettings.auxModelTemp||.5),researchDepthEl&&(researchDepthEl.value=appSettings.researchDepth||2),researchBreadthEl&&(researchBreadthEl.value=appSettings.researchBreadth||3),customSystemPromptEl&&(customSystemPromptEl.value=appSettings.customSystemPrompt||""),websocketConcurrencyEl&&(websocketConcurrencyEl.value=appSettings.websocketConcurrency||5)}function saveAppSettings(){primaryModelSelectorEl&&(appSettings.primaryModel=primaryModelSelectorEl.value),primaryModelTempEl&&(appSettings.primaryModelTemp=parseFloat(primaryModelTempEl.value)),auxModelSelectorEl&&(appSettings.auxModel=auxModelSelectorEl.value),auxModelTempEl&&(appSettings.auxModelTemp=parseFloat(auxModelTempEl.value)),researchDepthEl&&(appSettings.researchDepth=parseInt(researchDepthEl.value)),researchBreadthEl&&(appSettings.researchBreadth=parseInt(researchBreadthEl.value)),customSystemPromptEl&&(appSettings.customSystemPrompt=customSystemPromptEl.value.trim()),websocketConcurrencyEl&&(appSettings.websocketConcurrency=parseInt(websocketConcurrencyEl.value,10)||5),localStorage.setItem("appSettings",JSON.stringify(appSettings)),alert("Settings saved!"),settingsModal&&closeModal(settingsModal)}export function closeModal(e){e&&(e.classList.add("hidden"),e.classList.remove("flex"))}export function openSettingsModal(){settingsModal&&(settingsModal.classList.remove("hidden"),settingsModal.classList.add("flex"),populateModelSelectors())}async function pullNewModel(){const e=pullModelNameInputEl.value.trim();if(!e)return pullStatusEl.textContent="Please enter a model name to pull.",void(pullStatusEl.className="text-xs text-red-500 mt-1");pullModelBtnEl.disabled=!0,pullStatusEl.textContent=`Pulling ${e}... This may take a while.`,pullStatusEl.className="text-xs text-blue-500 mt-1";try{const t=await fetch("/api/ollama/pull",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e})});pullModelBtnEl.disabled=!1;const l=await t.text();let s;try{s=JSON.parse(l)}catch(e){throw console.error("Failed to parse JSON from pull response:",l),new Error(`Server returned non-JSON response: ${l.substring(0,100)}`)}if(!t.ok)throw new Error(s.details||s.error||`Failed to pull model (${t.status})`);!1!==s.success?(pullStatusEl.textContent=`${e} pull status: ${s.message||"Completed (check server logs for details)."}`,pullStatusEl.className="text-xs text-green-500 mt-1",pullModelNameInputEl.value="",populateModelSelectors()):(pullStatusEl.textContent=`Error pulling ${e}: ${s.message||s.error||"Unknown error"}`,pullStatusEl.className="text-xs text-red-500 mt-1")}catch(e){pullModelBtnEl.disabled=!1,pullStatusEl.textContent=`Error: ${e.message}`,pullStatusEl.className="text-xs text-red-500 mt-1",console.error("Pull model error:",e)}}